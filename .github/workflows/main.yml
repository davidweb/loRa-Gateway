# Nom du workflow
name: Build and Attach Release Firmware

# Déclencheur : s'exécute UNIQUEMENT quand une "Release" est publiée sur GitHub
on:
  release:
    types: [published]

# Tâches à exécuter
jobs:
  build-and-upload:
    # Utiliser la dernière version d'Ubuntu
    runs-on: ubuntu-latest

    steps:
      # Étape 1: Récupérer le code source de la release
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # 'github.ref' correspond à la référence du tag de la release (ex: v1.1.0-stable)
          ref: ${{ github.ref }}

      # Étape 2: Mettre en cache les dépendances pour accélérer les futurs builds
      - name: Cache PlatformIO dependencies
        uses: actions/cache@v3
        with:
          path: ~/.platformio/
          key: ${{ runner.os }}-pio

      # Étape 3: Installer PlatformIO Core
      - name: Set up PlatformIO Core
        uses: platformio/action-core@v1

      # Étape 4: Compiler le projet pour notre carte
      - name: Build the project
        run: pio run -e heltec_wifi_lora_32_v3

      # Étape 5: Préparer le fichier pour l'upload
      # Renomme le firmware.bin avec un nom de version unique pour éviter les conflits
      - name: Prepare firmware file
        run: |
          FIRMWARE_PATH=".pio/build/heltec_wifi_lora_32_v3/firmware.bin"
          RELEASE_TAG="${{ github.ref_name }}"
          mv $FIRMWARE_PATH "Gateway-Firmware-${RELEASE_TAG}.bin"
        
      # Étape 6: Attacher le firmware compilé à la page de la Release
      # C'est l'étape magique !
      - name: Upload Firmware to Release
        uses: softprops/action-gh-release@v1
        with:
          # Le fichier à attacher. Le '*' est un joker.
          files: Gateway-Firmware-*.bin
